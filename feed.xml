<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://sghzeng.github.io/blogposts/feed.xml" rel="self" type="application/atom+xml"/><link href="https://sghzeng.github.io/blogposts/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-02-10T17:57:35+08:00</updated><id>https://sghzeng.github.io/blogposts/feed.xml</id><title type="html">Blogposts</title><subtitle>Home to my Blogposts track </subtitle><entry><title type="html">Can Large Language Models Help Directed Fuzzing?</title><link href="https://sghzeng.github.io/blogposts/blog/can-llms-help-directed-fuzzing/" rel="alternate" type="text/html" title="Can Large Language Models Help Directed Fuzzing?"/><published>2025-04-28T00:00:00+08:00</published><updated>2025-04-28T00:00:00+08:00</updated><id>https://sghzeng.github.io/blogposts/blog/can-llms-help-directed-fuzzing</id><content type="html" xml:base="https://sghzeng.github.io/blogposts/blog/can-llms-help-directed-fuzzing/"><![CDATA[<h2 id="introduction">Introduction</h2> <p>Software testing and bug finding have always been critical challenges in computer security. Among various testing techniques, fuzzing has emerged as one of the most effective approaches for discovering security vulnerabilities. At its core, fuzzing consists of two key components:</p> <ol> <li><strong>Input Generator</strong>: Produces and mutates test inputs at high speed.</li> <li><strong>Runtime Monitor</strong>: Detects security violations during execution (e.g., AddressSanitizer).</li> </ol> <p>In many practical scenarios, developers need to focus on testing specific program locations. For example:</p> <ul> <li>Verifying if a newly patched vulnerability is fixed.</li> <li>Testing recently modified code.</li> <li>Checking potential bugs reported by static analyzers.</li> </ul> <p>Directed fuzzing is a testing technique that automatically generates inputs attempting to reach and trigger buggy program states at specific target locations.</p> <p>Traditional directed fuzzing techniques have long faced challenges when it comes to handling intricate program structures. But the game is changing. With the rise of Large Language Models (LLMs), we’re witnessing a revolution in program analysis<d-cite key="fang2024large"></d-cite><d-cite key="pei2023can">. These models aren't just about generating text—they're showcasing remarkable abilities in understanding code structures, deciphering semantics, and identifying complex patterns within software. The potential here is enormous. By leveraging LLMs' ability to comprehend and analyze complex program behaviors, we're opening the door to groundbreaking advancements in how we test and secure software systems.</d-cite></p> <p>This leads to an interesting question:</p> <p><strong>Can LLMs assist or improve upon traditional directed fuzzing approaches in efficiently reaching target locations?</strong></p> <p>This blog explores this question by evaluating the performance of various LLMs and comparing them with traditional fuzzers using a maze program synthesized from the Fuzzle benchmark.</p> <p>Our results show that while LLMs exhibit strong reasoning capabilities, they face challenges in effectively generating inputs to reach specific program locations compared to traditional directed fuzzers.</p> <h2 id="motivating-example">Motivating Example</h2> <p>To understand the challenges, let’s look at a simplified example that mimics a vulnerable program:</p> <figure class="highlight"><pre><code class="language-c--" data-lang="c++"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
</pre></td><td class="code"><pre><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span>
<span class="kt">void</span> <span class="nf">cell_A</span><span class="p">(</span><span class="kt">int</span> <span class="n">choice</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"Input value: %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">choice</span><span class="p">);</span>

    <span class="c1">// Path 1: value &lt; 0</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">choice</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">cell_B</span><span class="p">(</span><span class="n">choice</span><span class="p">);</span>         <span class="c1">// Dead end</span>
    <span class="p">}</span>
    <span class="c1">// Path 2: 0 &lt;= value &lt;= 50</span>
    <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">choice</span> <span class="o">&lt;=</span> <span class="mi">50</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">cell_A</span><span class="p">(</span><span class="n">choice</span><span class="p">);</span>         <span class="c1">// Infinite loop</span>
    <span class="p">}</span>
    <span class="c1">// Path 3: value &gt; 50</span>
    <span class="k">else</span> <span class="p">{</span>
        <span class="n">cell_C</span><span class="p">(</span><span class="n">choice</span><span class="p">);</span>         <span class="c1">// Can reach target</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">cell_B</span><span class="p">(</span><span class="kt">int</span> <span class="n">choice</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">choice</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// This condition is always false</span>
        <span class="n">bug</span><span class="p">();</span>           <span class="c1">// Can never reach bug() here</span>
    <span class="p">}</span>
    <span class="c1">// Dead end</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"Reached dead end</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">cell_C</span><span class="p">(</span><span class="kt">int</span> <span class="n">choice</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Complex condition determining path</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">choice</span> <span class="o">%</span> <span class="mi">7</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">cell_D</span><span class="p">(</span><span class="n">choice</span><span class="p">);</span>    <span class="c1">// Target: potential vulnerability</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">cell_B</span><span class="p">(</span><span class="n">choice</span><span class="p">);</span>    <span class="c1">// Return to dead end</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">cell_D</span><span class="p">(</span><span class="kt">int</span> <span class="n">choice</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">bug</span><span class="p">();</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">bug</span><span class="p">(){</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"Found vulnerability!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="n">abort</span><span class="p">();</span>  <span class="c1">// Vulnerability triggered</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">input</span><span class="p">;</span>
    <span class="n">scanf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">input</span><span class="p">);</span>    <span class="c1">// Read user input</span>
    <span class="n">cell_A</span><span class="p">(</span><span class="n">input</span><span class="p">);</span>          <span class="c1">// Start exploration</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure> <h3 id="understanding-the-example">Understanding the Example</h3> <p>This code simulates a program with a potential vulnerability in <code class="language-plaintext highlighter-rouge">cell_D</code> that we want to trigger. To reach it:</p> <ol> <li>The program takes a single integer input.</li> <li>Starting from <code class="language-plaintext highlighter-rouge">cell_A</code>, it navigates through different paths based on input conditions.</li> <li>Only inputs that are both greater than 50 <strong>and</strong> divisible by 7 can reach the target <code class="language-plaintext highlighter-rouge">cell_D</code>.</li> <li>All other paths lead to <code class="language-plaintext highlighter-rouge">cell_B</code>, which is a dead end, or loop back to <code class="language-plaintext highlighter-rouge">cell_A</code>, causing infinite recursion.</li> </ol> <p>The purpose of this example is to demonstrate why directed fuzzing is challenging. Even in this simple program, there are several complexities:</p> <ol> <li><strong>Control Flow Dependencies</strong>: Understanding the caller and callee relationships among functions is essential. This involves analyzing the program’s control flow graph (CFG) to identify paths that can reach the target.</li> <li><strong>Data Flow Dependencies</strong>: Conditions in the CFG may depend on variables whose values are determined by previous computations or inputs not on the direct path.</li> <li><strong>Path Condition Solving</strong>: Generating inputs that satisfy all the path conditions involved is crucial.</li> </ol> <p>In our example, to reach <code class="language-plaintext highlighter-rouge">cell_D</code> (our target), a test input must satisfy multiple conditions:</p> <ul> <li>Must be greater than 50 (condition in <code class="language-plaintext highlighter-rouge">cell_A</code>).</li> <li>Must be divisible by 7 (condition in <code class="language-plaintext highlighter-rouge">cell_C</code>).</li> </ul> <h2 id="understanding-the-testbed">Understanding the Testbed</h2> <p>To systematically evaluate how LLMs perform on directed fuzzing tasks, we need a controlled testing environment. This is where the Fuzzle benchmark comes in. Fuzzle synthesizes the bug method into a maze-generation process, where triggering a bug is analogous to finding the maze’s exit. Successfully solving the maze demonstrates a model’s ability to generate correct inputs that reach the buggy function.</p> <p>In this study, we used a 10x10 maze program generated by Fuzzle because. Think of it as a more complex version of our previous example, but instead of 4 cells (<code class="language-plaintext highlighter-rouge">cell_A</code> to <code class="language-plaintext highlighter-rouge">cell_D</code>), it has 100 functions (<code class="language-plaintext highlighter-rouge">func_0</code> through <code class="language-plaintext highlighter-rouge">func_99</code>). Here’s what makes it interesting. Based on preliminary results, only the OpenAI o1 model performed relatively well. Testing larger and more complex maze sizes seemed unnecessary.</p> <ol> <li><strong>Program Structure</strong>: <ul> <li>Each function represents a cell in the maze.</li> <li>Function calls represent connection paths between cells.</li> <li>The program starts at <code class="language-plaintext highlighter-rouge">func_0</code> (entrance).</li> <li><code class="language-plaintext highlighter-rouge">func_bug</code> represents our target (exit).</li> </ul> </li> <li><strong>Navigation Rules</strong>: <ul> <li>Each function reads one byte from the input.</li> <li>Based on this byte’s value, it decides which function to call next.</li> <li>Wrong decisions lead to dead ends or infinite loops.</li> </ul> </li> </ol> <p>The program structure can be visualized as a maze:</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/blogposts/assets/img/2025-04-28-can-llms-help-directed-fuzzing/maze_viz-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/blogposts/assets/img/2025-04-28-can-llms-help-directed-fuzzing/maze_viz-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/blogposts/assets/img/2025-04-28-can-llms-help-directed-fuzzing/maze_viz-1400.webp"/> <img src="/blogposts/assets/img/2025-04-28-can-llms-help-directed-fuzzing/maze_viz.png" class="img-fluid" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <ul> <li><strong>White cells</strong>: Functions in the program.</li> <li><strong>Black cells</strong>: No connection exists between functions.</li> <li><strong>Yellow cells</strong>: Critical path functions that must be traversed to reach the target.</li> <li><strong>Entry point (top-left)</strong>: <code class="language-plaintext highlighter-rouge">func_0</code>, where program execution begins.</li> <li><strong>Target (bottom-right)</strong>: <code class="language-plaintext highlighter-rouge">func_bug</code>, which we aim to reach.</li> </ul> <p>This visualization helps us understand why directed fuzzing is challenging:</p> <ol> <li>The maze is large (100 cells vs. our 4-cell example).</li> <li>Many paths lead to dead ends.</li> <li>The correct path requires satisfying multiple conditions.</li> <li>Some paths may loop back to previously visited functions.</li> </ol> <h3 id="human-expert-chain-of-thought">Human Expert Chain-of-Thought</h3> <p>To trigger the bug, a human expert would approach this problem through the following chain-of-thought:</p> <ol> <li><strong>Analyze Function Relationships</strong>: Determine caller and callee relationships among all functions.</li> <li> <p><strong>Identify the Critical Path</strong>: Figure out the exact path marked by the yellow cells:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>func_0 -&gt; func_10 -&gt; func_11 -&gt; func_12 -&gt; func_13 -&gt; func_14 -&gt; func_24 -&gt; func_34 -&gt; func_44 -&gt; func_43 -&gt; func_42 -&gt; func_32 -&gt; func_31 -&gt; func_41 -&gt; func_51 -&gt; func_52 -&gt; func_62 -&gt; func_72 -&gt; func_82 -&gt; func_83 -&gt; func_93 -&gt; func_94 -&gt; func_84 -&gt; func_74 -&gt; func_75 -&gt; func_76 -&gt; func_86 -&gt; func_87 -&gt; func_88 -&gt; func_78 -&gt; func_79 -&gt; func_89 -&gt; func_99 -&gt; func_bug
</code></pre></div> </div> </li> <li><strong>Collect Path Conditions</strong>: Along this path, collect all the conditions that must be satisfied based on the input bytes read at each function.</li> <li><strong>Solve the Path Conditions</strong>: Generate the final input that satisfies all these conditions to reach <code class="language-plaintext highlighter-rouge">func_bug</code>.</li> </ol> <h2 id="experiment-results">Experiment Results</h2> <h3 id="selected-llm-models">Selected LLM Models</h3> <p>We evaluated popular LLM models accessible through web interfaces, including:</p> <ul> <li><strong>OpenAI</strong>: o1, o1-mini, GPT-4, GPT-4o, GPT-4o-mini</li> <li><strong>Anthropic</strong>: Claude 3.5 Sonnet, Claude 3 Haiku</li> <li><strong>Google</strong>: Gemini 1.5 Pro</li> </ul> <h3 id="prompts">Prompts</h3> <p><strong>Zero-Shot Prompt</strong></p> <p>We tested whether the LLMs could, without any hints or prior context, directly provide an input that reaches <code class="language-plaintext highlighter-rouge">func_bug</code>. We provided the test program by copying and pasting the source code into the chatbox, followed by the question:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Examine the uploaded code. Provide a call trace starting from the main function to 'func_bug'.
</code></pre></div></div> <p>To clarify potential confusion due to local variables with the same name, we added:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Please note the variable 'c' is a function local variable that only changes with each function call and is determined by the input at the current index.
</code></pre></div></div> <p><strong>Feedback-Driven Approach</strong></p> <p>If the LLM’s initial response was incorrect, we provided feedback indicating the error and asked them to fix it.</p> <p><strong>Chain-of-Thought (CoT) from o1</strong></p> <p>We provided the chain-of-thought generated by o1 to other LLMs to see if it would help them produce the correct answer.</p> <p><strong><a href="#human-expert-chain-of-thought">Human Expert Chain-of-Thought (CoT*)</a></strong></p> <p>We supplied the detailed reasoning steps from a human expert to the LLMs.</p> <h3 id="testing-methodology">Testing Methodology</h3> <p>We designed the testing methodology as follows:</p> <ol> <li><strong>Zero-Shot Evaluation</strong>: Test if the LLM can directly provide the correct input without any hints. <ul> <li>If <strong>yes</strong>, record success and stop testing.</li> <li>If <strong>no</strong>, proceed to steps 2 and 3 simultaneously.</li> </ul> </li> <li><strong>Using o1’s CoT</strong>: Provide OpenAI o1’s chain-of-thought to other LLMs and see if they can produce the correct input. <ul> <li>If <strong>yes</strong>, record success and stop testing.</li> <li>If <strong>no</strong>, proceed to step 4.</li> </ul> </li> <li><strong>Feedback-Driven Correction</strong>: Inform the LLM whether their output is correct or not, hoping it can self-correct and provide the answer. <ul> <li>If <strong>yes</strong>, record success and stop testing.</li> <li>If <strong>no</strong>, proceed to step 4.</li> </ul> </li> <li>**<a href="#human-expert-chain-of-thought">Using Human Expert CoT**</a>: Provide the human expert’s chain-of-thought to the LLMs. <ul> <li>If the LLM makes any mistakes, record failure.</li> <li>If the final answer is correct, record success.</li> </ul> </li> </ol> <h3 id="results-summary">Results Summary</h3> <p>We have redesigned the table to break down the problem into three evaluation criteria:</p> <ol> <li><strong>Correct Caller-Callee Relationships</strong></li> <li><strong>Correct Call Sequence</strong></li> <li><strong>Correct Input</strong></li> </ol> <p>Below is the table summarizing the performance of each model across the different testing methods and evaluation criteria. A checkmark (✔) indicates success, a cross (✖) indicates failure, and N/A indicates that the test was not applicable.</p> <table> <thead> <tr> <th><strong>Test Method</strong></th> <th><strong>Evaluation Criteria</strong></th> <th><strong>o1</strong></th> <th><strong>o1-mini</strong></th> <th><strong>GPT-4</strong></th> <th><strong>GPT-4o</strong></th> <th><strong>GPT-4o-mini</strong></th> <th><strong>Claude 3.5 Sonnet</strong></th> <th><strong>Claude 3 Haiku</strong></th> <th><strong>Gemini 1.5 Pro</strong></th> </tr> </thead> <tbody> <tr> <td><strong>Zero-Shot Prompt</strong></td> <td>Correct Caller-Callee</td> <td>✔</td> <td>✔</td> <td>✖</td> <td>✖</td> <td>✖</td> <td>✖</td> <td>✖</td> <td>✖</td> </tr> <tr> <td> </td> <td>Correct Call Sequence</td> <td>✔</td> <td>✖</td> <td>✖</td> <td>✖</td> <td>✖</td> <td>✖</td> <td>✖</td> <td>✖</td> </tr> <tr> <td> </td> <td>Correct Input</td> <td>✖</td> <td>✖</td> <td>✖</td> <td>✖</td> <td>✖</td> <td>✖</td> <td>✖</td> <td>✖</td> </tr> <tr> <td><strong>Feedback-Driven</strong></td> <td>Correct Caller-Callee</td> <td>N/A</td> <td>✖</td> <td>✖</td> <td>✖</td> <td>✖</td> <td>✖</td> <td>✖</td> <td>✖</td> </tr> <tr> <td> </td> <td>Correct Call Sequence</td> <td>N/A</td> <td>✖</td> <td>✖</td> <td>✖</td> <td>✖</td> <td>✖</td> <td>✖</td> <td>✖</td> </tr> <tr> <td> </td> <td>Correct Input</td> <td>✔</td> <td>✖</td> <td>✖</td> <td>✖</td> <td>✖</td> <td>✖</td> <td>✖</td> <td>✖</td> </tr> <tr> <td><strong>Using o1’s CoT</strong></td> <td>Correct Caller-Callee</td> <td>N/A</td> <td>✔</td> <td>✖</td> <td>✖</td> <td>✖</td> <td>✖</td> <td>✖</td> <td>✖</td> </tr> <tr> <td> </td> <td>Correct Call Sequence</td> <td>N/A</td> <td>✔</td> <td>✖</td> <td>✖</td> <td>✖</td> <td>✖</td> <td>✖</td> <td>✖</td> </tr> <tr> <td> </td> <td>Correct Input</td> <td>N/A</td> <td>✖</td> <td>✖</td> <td>✖</td> <td>✖</td> <td>✖</td> <td>✖</td> <td>✖</td> </tr> <tr> <td><strong>Using Human Expert CoT</strong></td> <td>Correct Caller-Callee</td> <td>N/A</td> <td>N/A</td> <td>✖</td> <td>✔</td> <td>✖</td> <td>✔</td> <td>✔</td> <td>✔</td> </tr> <tr> <td> </td> <td>Correct Call Sequence</td> <td>N/A</td> <td>N/A</td> <td>✖</td> <td>✔</td> <td>✖</td> <td>✖</td> <td>✖</td> <td>✖</td> </tr> <tr> <td> </td> <td>Correct Input</td> <td>N/A</td> <td>N/A</td> <td>✖</td> <td>✖</td> <td>✖</td> <td>✖</td> <td>✖</td> <td>✖</td> </tr> </tbody> </table> <h3 id="observations">Observations</h3> <h4 id="o1"><a href="#gpto1-chat-dialog">o1</a></h4> <p>From the chat dialog, o1 can break down the problem into reasonable subtasks. It found the correct call trace to the target <code class="language-plaintext highlighter-rouge">func_bug</code>. Examining its chain-of-thought, we see that o1 effectively navigated the maze, avoided dead ends and loops, and collected the necessary path conditions. However, it initially provided an incorrect input array due to miscounting indices.</p> <p>Upon informing o1:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The function call trace is correct; however, the input array is wrong. Figure out why and fix it.
</code></pre></div></div> <p>After 2 minutes and 3 seconds of processing, o1 realized the mistake and successfully corrected the error, ultimately providing the correct input.</p> <h4 id="o1-mini"><a href="#gpto1-mini-chat-dialog">o1-mini</a></h4> <p>While o1-mini attempted to analyze the problem, it incorrectly concluded that there is no path from <code class="language-plaintext highlighter-rouge">func_0</code> to <code class="language-plaintext highlighter-rouge">func_bug</code>. When provided with o1’s chain-of-thought, it was able to find the correct path but faced similar issues with variable confusion. Even after feedback, it couldn’t resolve the problem.</p> <h4 id="gpt4o-gpt4o-mini-and-gpt4"><a href="#gpt4o-chat-dialog">GPT4o</a>, <a href="#gpt4o-mini-chat-dialog">GPT4o-mini</a> and <a href="#gpt4-chat-dialog">GPT4</a></h4> <p>GPT-4 and its variants struggled with hallucinations and could not correctly determine the caller and callee relationships. Even when given the human expert’s chain-of-thought, only GPT-4o was able to understand and produce the correct call relationships but struggled with solving the path conditions.</p> <h4 id="claude-35-and-gemini-15-pro">Claude 3.5 and Gemini 1.5 Pro</h4> <p>Although these models could identify some function relationships, they suffered from hallucinations, such as assuming <code class="language-plaintext highlighter-rouge">func_15</code> calls <code class="language-plaintext highlighter-rouge">func_21</code>, which was incorrect. They could not find the correct call trace.</p> <h3 id="comparison-with-traditional-directed-fuzzers">Comparison with Traditional Directed Fuzzers</h3> <p>We also evaluated state-of-the-art directed fuzzers on this maze program:</p> <table> <thead> <tr> <th> </th> <th><strong>AFLGo&lt;/d-cite&gt;<d-cite key="bohme2017directed"></d-cite></strong></th> <th><strong>AFL++<d-cite key="fioraldi2020afl"></d-cite></strong></th> <th><strong>DAFL<d-cite key="kim2023dafl"></d-cite></strong></th> <th><strong>SelectFuzz<d-cite key="luo2023selectfuzz"></d-cite></strong></th> <th><strong>Beacon<d-cite key="huang2022beacon"></d-cite></strong></th> </tr> </thead> <tbody> <tr> <td><strong>Time to Exposure (min)</strong></td> <td>4.97</td> <td>0.15</td> <td>0.17</td> <td>3.25</td> <td>1.38</td> </tr> </tbody> </table> <p><strong>Key Findings</strong>:</p> <ol> <li>Traditional directed fuzzers can solve this maze program more efficiently than LLMs.</li> <li>High throughput allows fuzzers to solve the maze without reasoning, relying on rapid random input generation.</li> </ol> <h2 id="ways-that-llm-might-help">Ways That LLM Might Help</h2> <p>Our experiments revealed several insights about using LLMs for directed fuzzing:</p> <p><strong>Pros</strong>:</p> <ol> <li><strong>Semantic Understanding</strong>: LLMs demonstrated a superior ability to understand program semantics compared to traditional static analysis, which may overlook implicit control and data flow.</li> <li><strong>Human-Like Reasoning</strong>: LLMs approach problems more like humans, making decisions at a higher level rather than relying solely on predefined algorithms.</li> </ol> <p><strong>Cons</strong>:</p> <ol> <li><strong>Performance</strong>: LLMs are much slower compared to traditional static and dynamic analysis tools.</li> <li><strong>Context Window Limitations</strong>: Large programs exceed current LLM context windows, requiring complex chunking strategies. </li> <li><strong>Hallucinations</strong>: LLMs may generate incorrect or fabricated information.</li> </ol> <p>Recent academic work&lt;/d-cite&gt;<d-cite key="chang2024leveling"></d-cite> has shown promising results by combining LLMs with fuzzing techniques, particularly in automatic generation of fuzz targets and LLM-assisted input generation. Leveraging the reasoning and decision-making capabilities of LLMs, future directions could include:</p> <ol> <li><strong>Directed Fuzz Introspection</strong>: Using LLMs to debug and identify bottlenecks in the fuzzing process and provide feedback to the fuzzer.</li> <li><strong>Assisting Static Analysis</strong>: Filtering out false positives and negatives in traditional static analysis.</li> <li><strong>Path Condition Solving</strong>: Serving as solvers for complex path conditions.</li> <li><strong>Strategy Generation</strong>: Generating high-level strategies for exploration, complemented by low-level program analysis tools.</li> </ol> <h2 id="appendix">Appendix</h2> <h3 id="maze-program-source-code">Maze Program Source Code</h3> <details> <summary>View Code</summary> <div class="l-page"> <iframe src="/blogposts/assets/html/2025-04-28-can-llms-help-directed-fuzzing/Wilsons_10x10_0_1_25percent_default_gen.html" frameborder="0" scrolling="yes" height="500px" width="100%"> </iframe> </div> </details> <h3 id="o1-chat-dialog">o1 Chat Dialog</h3> <details> <summary>View Full Dialog</summary> <div class="l-page"> <iframe src="/blogposts/assets/html/2025-04-28-can-llms-help-directed-fuzzing/gpto1-dialog.html" frameborder="0" scrolling="yes" height="500px" width="100%"> </iframe> </div> </details> <h3 id="o1-mini-chat-dialog">o1-mini Chat Dialog</h3> <details> <summary>View Full Dialog</summary> <div class="l-page"> <iframe src="/blogposts/assets/html/2025-04-28-can-llms-help-directed-fuzzing/gpto1-mini-dialog.html" frameborder="0" scrolling="yes" height="500px" width="100%"> </iframe> </div> </details> <h3 id="gpt-4-chat-dialog">GPT-4 Chat Dialog</h3> <details> <summary>View Full Dialog</summary> <div class="l-page"> <iframe src="/blogposts/assets/html/2025-04-28-can-llms-help-directed-fuzzing/gpt4-dialog.html" frameborder="0" scrolling="yes" height="500px" width="100%"> </iframe> </div> </details> <h3 id="gpt-4o-chat-dialog">GPT-4o Chat Dialog</h3> <details> <summary>View Full Dialog</summary> <div class="l-page"> <iframe src="/blogposts/assets/html/2025-04-28-can-llms-help-directed-fuzzing/gpt4o-dialog.html" frameborder="0" scrolling="yes" height="500px" width="100%"> </iframe> </div> </details> <h3 id="gpt-4o-mini-chat-dialog">GPT-4o-mini Chat Dialog</h3> <details> <summary>View Full Dialog</summary> <div class="l-page"> <iframe src="/blogposts/assets/html/2025-04-28-can-llms-help-directed-fuzzing/gpt4o-mini-dialog.html" frameborder="0" scrolling="yes" height="500px" width="100%"> </iframe> </div> </details> <h3 id="claude-35-sonnet-chat-dialog">Claude 3.5 Sonnet Chat Dialog</h3> <details> <summary>View Full Dialog</summary> <div class="l-page"> <iframe src="/blogposts/assets/html/2025-04-28-can-llms-help-directed-fuzzing/claude-3.5-sonnet-dialog.html" frameborder="0" scrolling="yes" height="500px" width="100%"> </iframe> </div> </details> <h3 id="claude-3-haiku-chat-dialog">Claude 3 Haiku Chat Dialog</h3> <details> <summary>View Full Dialog</summary> <div class="l-page"> <iframe src="/blogposts/assets/html/2025-04-28-can-llms-help-directed-fuzzing/claude-3-haiku-dialog.html" frameborder="0" scrolling="yes" height="500px" width="100%"> </iframe> </div> </details> <h3 id="gemini-15-pro-chat-dialog">Gemini 1.5 Pro Chat Dialog</h3> <details> <summary>View Full Dialog</summary> <div class="l-page"> <iframe src="/blogposts/assets/html/2025-04-28-can-llms-help-directed-fuzzing/gemini-1.5-pro-dialog.html" frameborder="0" scrolling="yes" height="500px" width="100%"> </iframe> </div> </details>]]></content><author><name>Anonymous</name></author><summary type="html"><![CDATA[An empirical study comparing the performance of Large Language Models against traditional directed fuzzers on program analysis tasks, focusing on path discovery and target reachability using the Fuzzle benchmark framework.]]></summary></entry><entry><title type="html">Sample Blog Post</title><link href="https://sghzeng.github.io/blogposts/blog/distill-example/" rel="alternate" type="text/html" title="Sample Blog Post"/><published>2025-04-28T00:00:00+08:00</published><updated>2025-04-28T00:00:00+08:00</updated><id>https://sghzeng.github.io/blogposts/blog/distill-example</id><content type="html" xml:base="https://sghzeng.github.io/blogposts/blog/distill-example/"><![CDATA[<p>Note: please use the table of contents as defined in the front matter rather than the traditional markdown styling.</p> <h2 id="equations">Equations</h2> <p>This theme supports rendering beautiful math in inline and display modes using <a href="https://www.mathjax.org/">MathJax 3</a> engine. You just need to surround your math expression with <code class="language-plaintext highlighter-rouge">$$</code>, like <code class="language-plaintext highlighter-rouge">$$ E = mc^2 $$</code>. If you leave it inside a paragraph, it will produce an inline expression, just like \(E = mc^2\).</p> <p>To use display mode, again surround your expression with <code class="language-plaintext highlighter-rouge">$$</code> and place it as a separate paragraph. Here is an example:</p> \[\left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right)\] <p>Note that MathJax 3 is <a href="https://docs.mathjax.org/en/latest/upgrading/whats-new-3.0.html">a major re-write of MathJax</a> that brought a significant improvement to the loading and rendering speed, which is now <a href="http://www.intmath.com/cg5/katex-mathjax-comparison.php">on par with KaTeX</a>.</p> <h2 id="images-and-figures">Images and Figures</h2> <p>Its generally a better idea to avoid linking to images hosted elsewhere - links can break and you might face losing important information in your blog post. To include images in your submission in this way, you must do something like the following:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{% include figure.html path="assets/img/2025-04-28-distill-example/iclr.png" class="img-fluid" %}
</code></pre></div></div> <p>which results in the following image:</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/blogposts/assets/img/2025-04-28-distill-example/iclr-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/blogposts/assets/img/2025-04-28-distill-example/iclr-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/blogposts/assets/img/2025-04-28-distill-example/iclr-1400.webp"/> <img src="/blogposts/assets/img/2025-04-28-distill-example/iclr.png" class="img-fluid" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>To ensure that there are no namespace conflicts, you must save your asset to your unique directory <code class="language-plaintext highlighter-rouge">/assets/img/2025-04-28-[SUBMISSION NAME]</code> within your submission.</p> <p>Please avoid using the direct markdown method of embedding images; they may not be properly resized. Some more complex ways to load images (note the different styles of the shapes/shadows):</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/blogposts/assets/img/2025-04-28-distill-example/9-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/blogposts/assets/img/2025-04-28-distill-example/9-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/blogposts/assets/img/2025-04-28-distill-example/9-1400.webp"/> <img src="/blogposts/assets/img/2025-04-28-distill-example/9.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/blogposts/assets/img/2025-04-28-distill-example/7-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/blogposts/assets/img/2025-04-28-distill-example/7-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/blogposts/assets/img/2025-04-28-distill-example/7-1400.webp"/> <img src="/blogposts/assets/img/2025-04-28-distill-example/7.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> A simple, elegant caption looks good between image rows, after each row, or doesn't have to be there at all. </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/blogposts/assets/img/2025-04-28-distill-example/8-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/blogposts/assets/img/2025-04-28-distill-example/8-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/blogposts/assets/img/2025-04-28-distill-example/8-1400.webp"/> <img src="/blogposts/assets/img/2025-04-28-distill-example/8.jpg" class="img-fluid z-depth-2" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/blogposts/assets/img/2025-04-28-distill-example/10-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/blogposts/assets/img/2025-04-28-distill-example/10-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/blogposts/assets/img/2025-04-28-distill-example/10-1400.webp"/> <img src="/blogposts/assets/img/2025-04-28-distill-example/10.jpg" class="img-fluid z-depth-2" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/blogposts/assets/img/2025-04-28-distill-example/11-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/blogposts/assets/img/2025-04-28-distill-example/11-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/blogposts/assets/img/2025-04-28-distill-example/11-1400.webp"/> <img src="/blogposts/assets/img/2025-04-28-distill-example/11.jpg" class="img-fluid" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/blogposts/assets/img/2025-04-28-distill-example/12-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/blogposts/assets/img/2025-04-28-distill-example/12-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/blogposts/assets/img/2025-04-28-distill-example/12-1400.webp"/> <img src="/blogposts/assets/img/2025-04-28-distill-example/12.jpg" class="img-fluid" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/blogposts/assets/img/2025-04-28-distill-example/7-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/blogposts/assets/img/2025-04-28-distill-example/7-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/blogposts/assets/img/2025-04-28-distill-example/7-1400.webp"/> <img src="/blogposts/assets/img/2025-04-28-distill-example/7.jpg" class="img-fluid" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h3 id="interactive-figures">Interactive Figures</h3> <p>Here’s how you could embed interactive figures that have been exported as HTML files. Note that we will be using plotly for this demo, but anything built off of HTML should work (<strong>no extra javascript is allowed!</strong>). All that’s required is for you to export your figure into HTML format, and make sure that the file exists in the <code class="language-plaintext highlighter-rouge">assets/html/[SUBMISSION NAME]/</code> directory in this repository’s root directory. To embed it into any page, simply insert the following code anywhere into your page.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{% include [FIGURE_NAME].html %} 
</code></pre></div></div> <p>For example, the following code can be used to generate the figure underneath it.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="n">plotly.express</span> <span class="k">as</span> <span class="n">px</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="sh">'</span><span class="s">https://raw.githubusercontent.com/plotly/datasets/master/earthquakes-23k.csv</span><span class="sh">'</span><span class="p">)</span>

<span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="p">.</span><span class="nf">density_mapbox</span><span class="p">(</span>
    <span class="n">df</span><span class="p">,</span> <span class="n">lat</span><span class="o">=</span><span class="sh">'</span><span class="s">Latitude</span><span class="sh">'</span><span class="p">,</span> <span class="n">lon</span><span class="o">=</span><span class="sh">'</span><span class="s">Longitude</span><span class="sh">'</span><span class="p">,</span> <span class="n">z</span><span class="o">=</span><span class="sh">'</span><span class="s">Magnitude</span><span class="sh">'</span><span class="p">,</span> <span class="n">radius</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>
    <span class="n">center</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">lat</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">lon</span><span class="o">=</span><span class="mi">180</span><span class="p">),</span> <span class="n">zoom</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">mapbox_style</span><span class="o">=</span><span class="sh">"</span><span class="s">stamen-terrain</span><span class="sh">"</span><span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>

<span class="n">fig</span><span class="p">.</span><span class="nf">write_html</span><span class="p">(</span><span class="sh">'</span><span class="s">./assets/html/2025-04-28-distill-example/plotly_demo_1.html</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div> <p>And then include it with the following:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"l-page"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;iframe</span> <span class="na">src=</span><span class="s">"{{ 'assets/html/2025-04-28-distill-example/plotly_demo_1.html' | relative_url }}"</span> <span class="na">frameborder=</span><span class="s">'0'</span> <span class="na">scrolling=</span><span class="s">'no'</span> <span class="na">height=</span><span class="s">"600px"</span> <span class="na">width=</span><span class="s">"100%"</span><span class="nt">&gt;&lt;/iframe&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div> <p>Voila!</p> <div class="l-page"> <iframe src="/blogposts/assets/html/2025-04-28-distill-example/plotly_demo_1.html" frameborder="0" scrolling="no" height="600px" width="100%"></iframe> </div> <h2 id="citations">Citations</h2> <p>Citations are then used in the article body with the <code class="language-plaintext highlighter-rouge">&lt;d-cite&gt;</code> tag. The key attribute is a reference to the id provided in the bibliography. The key attribute can take multiple ids, separated by commas.</p> <p>The citation is presented inline like this: <d-cite key="gregor2015draw"></d-cite> (a number that displays more information on hover). If you have an appendix, a bibliography is automatically created and populated in it.</p> <p>Distill chose a numerical inline citation style to improve readability of citation dense articles and because many of the benefits of longer citations are obviated by displaying more information on hover. However, we consider it good style to mention author last names if you discuss something at length and it fits into the flow well — the authors are human and it’s nice for them to have the community associate them with their work.</p> <hr/> <h2 id="footnotes">Footnotes</h2> <p>Just wrap the text you would like to show up in a footnote in a <code class="language-plaintext highlighter-rouge">&lt;d-footnote&gt;</code> tag. The number of the footnote will be automatically generated.<d-footnote>This will become a hoverable footnote.</d-footnote></p> <hr/> <h2 id="code-blocks">Code Blocks</h2> <p>This theme implements a built-in Jekyll feature, the use of Rouge, for syntax highlighting. It supports more than 100 languages. This example is in C++. All you have to do is wrap your code in a liquid tag:</p> <p>{% highlight c++ linenos %} <br/> code code code <br/> {% endhighlight %}</p> <p>The keyword <code class="language-plaintext highlighter-rouge">linenos</code> triggers display of line numbers. You can try toggling it on or off yourself below:</p> <figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="err">\</span><span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
<span class="n">string</span> <span class="n">myString</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"input a string: "</span><span class="p">;</span>
    <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">myString</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">myString</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>

    <span class="kt">char</span> <span class="n">charArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">[</span><span class="n">length</span><span class="p">];</span>

    <span class="n">charArray</span> <span class="o">=</span> <span class="n">myString</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">charArray</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure> <hr/> <h2 id="diagrams">Diagrams</h2> <p>This theme supports generating various diagrams from a text description using <a href="https://github.com/zhustec/jekyll-diagrams" target="\_blank">jekyll-diagrams</a> plugin. Below, we generate a few examples of such diagrams using languages such as <a href="https://mermaid-js.github.io/mermaid/" target="\_blank">mermaid</a>, <a href="https://plantuml.com/" target="\_blank">plantuml</a>, <a href="https://vega.github.io/vega-lite/" target="\_blank">vega-lite</a>, etc.</p> <p><strong>Note:</strong> different diagram-generation packages require external dependencies to be installed on your machine. Also, be mindful of that because of diagram generation the first time you build your Jekyll website after adding new diagrams will be SLOW. For any other details, please refer to <a href="https://github.com/zhustec/jekyll-diagrams" target="\_blank">jekyll-diagrams</a> README.</p> <p><strong>Note:</strong> This is not supported for local rendering!</p> <p>The diagram below was generated by the following code:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{% mermaid %}
sequenceDiagram
    participant John
    participant Alice
    Alice-&gt;&gt;John: Hello John, how are you?
    John--&gt;&gt;Alice: Great!
{% endmermaid %}
</code></pre></div></div> <div class="jekyll-diagrams diagrams mermaid"> <svg id="mermaid-1739181460461" width="100%" xmlns="http://www.w3.org/2000/svg" height="100%" style="max-width:450px;" viewBox="-50 -10 450 231"><style>#mermaid-1739181460461 .label{font-family:trebuchet ms,verdana,arial;color:#333}#mermaid-1739181460461 .node circle,#mermaid-1739181460461 .node ellipse,#mermaid-1739181460461 .node polygon,#mermaid-1739181460461 .node rect{fill:#ececff;stroke:#9370db;stroke-width:1px}#mermaid-1739181460461 .node.clickable{cursor:pointer}#mermaid-1739181460461 .arrowheadPath{fill:#333}#mermaid-1739181460461 .edgePath .path{stroke:#333;stroke-width:1.5px}#mermaid-1739181460461 .edgeLabel{background-color:#e8e8e8}#mermaid-1739181460461 .cluster rect{fill:#ffffde!important;stroke:#aa3!important;stroke-width:1px!important}#mermaid-1739181460461 .cluster text{fill:#333}#mermaid-1739181460461 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:trebuchet ms,verdana,arial;font-size:12px;background:#ffffde;border:1px solid #aa3;border-radius:2px;pointer-events:none;z-index:100}#mermaid-1739181460461 .actor{stroke:#ccf;fill:#ececff}#mermaid-1739181460461 text.actor{fill:#000;stroke:none}#mermaid-1739181460461 .actor-line{stroke:grey}#mermaid-1739181460461 .messageLine0{marker-end:"url(#arrowhead)"}#mermaid-1739181460461 .messageLine0,#mermaid-1739181460461 .messageLine1{stroke-width:1.5;stroke-dasharray:"2 2";stroke:#333}#mermaid-1739181460461 #arrowhead{fill:#333}#mermaid-1739181460461 #crosshead path{fill:#333!important;stroke:#333!important}#mermaid-1739181460461 .messageText{fill:#333;stroke:none}#mermaid-1739181460461 .labelBox{stroke:#ccf;fill:#ececff}#mermaid-1739181460461 .labelText,#mermaid-1739181460461 .loopText{fill:#000;stroke:none}#mermaid-1739181460461 .loopLine{stroke-width:2;stroke-dasharray:"2 2";marker-end:"url(#arrowhead)";stroke:#ccf}#mermaid-1739181460461 .note{stroke:#aa3;fill:#fff5ad}#mermaid-1739181460461 .noteText{fill:#000;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:14px}#mermaid-1739181460461 .section{stroke:none;opacity:.2}#mermaid-1739181460461 .section0{fill:rgba(102,102,255,.49)}#mermaid-1739181460461 .section2{fill:#fff400}#mermaid-1739181460461 .section1,#mermaid-1739181460461 .section3{fill:#fff;opacity:.2}#mermaid-1739181460461 .sectionTitle0,#mermaid-1739181460461 .sectionTitle1,#mermaid-1739181460461 .sectionTitle2,#mermaid-1739181460461 .sectionTitle3{fill:#333}#mermaid-1739181460461 .sectionTitle{text-anchor:start;font-size:11px;text-height:14px}#mermaid-1739181460461 .grid .tick{stroke:#d3d3d3;opacity:.3;shape-rendering:crispEdges}#mermaid-1739181460461 .grid path{stroke-width:0}#mermaid-1739181460461 .today{fill:none;stroke:red;stroke-width:2px}#mermaid-1739181460461 .task{stroke-width:2}#mermaid-1739181460461 .taskText{text-anchor:middle;font-size:11px}#mermaid-1739181460461 .taskTextOutsideRight{fill:#000;text-anchor:start;font-size:11px}#mermaid-1739181460461 .taskTextOutsideLeft{fill:#000;text-anchor:end;font-size:11px}#mermaid-1739181460461 .taskText0,#mermaid-1739181460461 .taskText1,#mermaid-1739181460461 .taskText2,#mermaid-1739181460461 .taskText3{fill:#fff}#mermaid-1739181460461 .task0,#mermaid-1739181460461 .task1,#mermaid-1739181460461 .task2,#mermaid-1739181460461 .task3{fill:#8a90dd;stroke:#534fbc}#mermaid-1739181460461 .taskTextOutside0,#mermaid-1739181460461 .taskTextOutside1,#mermaid-1739181460461 .taskTextOutside2,#mermaid-1739181460461 .taskTextOutside3{fill:#000}#mermaid-1739181460461 .active0,#mermaid-1739181460461 .active1,#mermaid-1739181460461 .active2,#mermaid-1739181460461 .active3{fill:#bfc7ff;stroke:#534fbc}#mermaid-1739181460461 .activeText0,#mermaid-1739181460461 .activeText1,#mermaid-1739181460461 .activeText2,#mermaid-1739181460461 .activeText3{fill:#000!important}#mermaid-1739181460461 .done0,#mermaid-1739181460461 .done1,#mermaid-1739181460461 .done2,#mermaid-1739181460461 .done3{stroke:grey;fill:#d3d3d3;stroke-width:2}#mermaid-1739181460461 .doneText0,#mermaid-1739181460461 .doneText1,#mermaid-1739181460461 .doneText2,#mermaid-1739181460461 .doneText3{fill:#000!important}#mermaid-1739181460461 .crit0,#mermaid-1739181460461 .crit1,#mermaid-1739181460461 .crit2,#mermaid-1739181460461 .crit3{stroke:#f88;fill:red;stroke-width:2}#mermaid-1739181460461 .activeCrit0,#mermaid-1739181460461 .activeCrit1,#mermaid-1739181460461 .activeCrit2,#mermaid-1739181460461 .activeCrit3{stroke:#f88;fill:#bfc7ff;stroke-width:2}#mermaid-1739181460461 .doneCrit0,#mermaid-1739181460461 .doneCrit1,#mermaid-1739181460461 .doneCrit2,#mermaid-1739181460461 .doneCrit3{stroke:#f88;fill:#d3d3d3;stroke-width:2;cursor:pointer;shape-rendering:crispEdges}#mermaid-1739181460461 .activeCritText0,#mermaid-1739181460461 .activeCritText1,#mermaid-1739181460461 .activeCritText2,#mermaid-1739181460461 .activeCritText3,#mermaid-1739181460461 .doneCritText0,#mermaid-1739181460461 .doneCritText1,#mermaid-1739181460461 .doneCritText2,#mermaid-1739181460461 .doneCritText3{fill:#000!important}#mermaid-1739181460461 .titleText{text-anchor:middle;font-size:18px;fill:#000}
#mermaid-1739181460461 g.classGroup text{fill:#9370db;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:10px}#mermaid-1739181460461 g.classGroup rect{fill:#ececff;stroke:#9370db}#mermaid-1739181460461 g.classGroup line{stroke:#9370db;stroke-width:1}#mermaid-1739181460461 .classLabel .box{stroke:none;stroke-width:0;fill:#ececff;opacity:.5}#mermaid-1739181460461 .classLabel .label{fill:#9370db;font-size:10px}#mermaid-1739181460461 .relation{stroke:#9370db;stroke-width:1;fill:none}#mermaid-1739181460461 #compositionEnd,#mermaid-1739181460461 #compositionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-1739181460461 #aggregationEnd,#mermaid-1739181460461 #aggregationStart{fill:#ececff;stroke:#9370db;stroke-width:1}#mermaid-1739181460461 #dependencyEnd,#mermaid-1739181460461 #dependencyStart,#mermaid-1739181460461 #extensionEnd,#mermaid-1739181460461 #extensionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-1739181460461 .branch-label,#mermaid-1739181460461 .commit-id,#mermaid-1739181460461 .commit-msg{fill:#d3d3d3;color:#d3d3d3}</style><style>#mermaid-1739181460461{color:#000;font:normal normal 400 normal 16px / normal "Times New Roman"}</style><g></g><g><line id="actor0" x1="75" y1="5" x2="75" y2="220" class="actor-line" stroke-width="0.5px" stroke="#999"></line><rect x="0" y="0" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="75" y="32.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="75" dy="0">John</tspan></text></g><g><line id="actor1" x1="275" y1="5" x2="275" y2="220" class="actor-line" stroke-width="0.5px" stroke="#999"></line><rect x="200" y="0" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="275" y="32.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="275" dy="0">Alice</tspan></text></g><defs><marker id="arrowhead" refX="5" refY="2" markerWidth="6" markerHeight="4" orient="auto"><path d="M 0,0 V 4 L6,2 Z"></path></marker></defs><defs><marker id="crosshead" markerWidth="15" markerHeight="8" orient="auto" refX="16" refY="4"><path fill="black" stroke="#000000" stroke-width="1px" d="M 9,2 V 6 L16,4 Z" style="stroke-dasharray: 0, 0;"></path><path fill="none" stroke="#000000" stroke-width="1px" d="M 0,1 L 6,7 M 6,1 L 0,7" style="stroke-dasharray: 0, 0;"></path></marker></defs><g><text x="175" y="93" class="messageText" style="text-anchor: middle;">Hello John, how are you?</text><line x1="275" y1="100" x2="75" y2="100" class="messageLine0" stroke-width="2" stroke="black" marker-end="url(#arrowhead)" style="fill: none;"></line></g><g><text x="175" y="128" class="messageText" style="text-anchor: middle;">Great!</text><line x1="75" y1="135" x2="275" y2="135" class="messageLine1" stroke-width="2" stroke="black" marker-end="url(#arrowhead)" style="stroke-dasharray: 3, 3; fill: none;"></line></g><g><rect x="0" y="155" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="75" y="187.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="75" dy="0">John</tspan></text></g><g><rect x="200" y="155" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="275" y="187.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="275" dy="0">Alice</tspan></text></g></svg> </div> <hr/> <h2 id="tweets">Tweets</h2> <p>An example of displaying a tweet:</p> <div class="jekyll-twitter-plugin"><blockquote class="twitter-tweet"><p lang="sv" dir="ltr">jekyll-twitter-plugin (1.0.0): A Liquid tag plugin for Jekyll that renders Tweets from Twitter API <a href="http://t.co/m4EIQPM9h4">http://t.co/m4EIQPM9h4</a></p>&mdash; RubyGems (@rubygems) <a href="https://twitter.com/rubygems/status/518821243320287232?ref_src=twsrc%5Etfw">October 5, 2014</a></blockquote> <script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> </div> <p>An example of pulling from a timeline:</p> <div class="jekyll-twitter-plugin"><a class="twitter-timeline" data-width="500" data-tweet-limit="3" href="https://twitter.com/jekyllrb?ref_src=twsrc%5Etfw">Tweets by jekyllrb</a> <script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> </div> <p>For more details on using the plugin visit: <a href="https://github.com/rob-murray/jekyll-twitter-plugin">jekyll-twitter-plugin</a></p> <hr/> <h2 id="blockquotes">Blockquotes</h2> <blockquote> We do not grow absolutely, chronologically. We grow sometimes in one dimension, and not in another, unevenly. We grow partially. We are relative. We are mature in one realm, childish in another. —Anais Nin </blockquote> <hr/> <h2 id="layouts">Layouts</h2> <p>The main text column is referred to as the body. It is the assumed layout of any direct descendants of the <code class="language-plaintext highlighter-rouge">d-article</code> element.</p> <div class="fake-img l-body"> <p>.l-body</p> </div> <p>For images you want to display a little larger, try <code class="language-plaintext highlighter-rouge">.l-page</code>:</p> <div class="fake-img l-page"> <p>.l-page</p> </div> <p>All of these have an outset variant if you want to poke out from the body text a little bit. For instance:</p> <div class="fake-img l-body-outset"> <p>.l-body-outset</p> </div> <div class="fake-img l-page-outset"> <p>.l-page-outset</p> </div> <p>Occasionally you’ll want to use the full browser width. For this, use <code class="language-plaintext highlighter-rouge">.l-screen</code>. You can also inset the element a little from the edge of the browser by using the inset variant.</p> <div class="fake-img l-screen"> <p>.l-screen</p> </div> <div class="fake-img l-screen-inset"> <p>.l-screen-inset</p> </div> <p>The final layout is for marginalia, asides, and footnotes. It does not interrupt the normal flow of <code class="language-plaintext highlighter-rouge">.l-body</code>-sized text except on mobile screen sizes.</p> <div class="fake-img l-gutter"> <p>.l-gutter</p> </div> <hr/> <h2 id="other-typography">Other Typography?</h2> <p>Emphasis, aka italics, with <em>asterisks</em> (<code class="language-plaintext highlighter-rouge">*asterisks*</code>) or <em>underscores</em> (<code class="language-plaintext highlighter-rouge">_underscores_</code>).</p> <p>Strong emphasis, aka bold, with <strong>asterisks</strong> or <strong>underscores</strong>.</p> <p>Combined emphasis with <strong>asterisks and <em>underscores</em></strong>.</p> <p>Strikethrough uses two tildes. <del>Scratch this.</del></p> <ol> <li>First ordered list item</li> <li>Another item ⋅⋅* Unordered sub-list.</li> <li>Actual numbers don’t matter, just that it’s a number ⋅⋅1. Ordered sub-list</li> <li>And another item.</li> </ol> <p>⋅⋅⋅You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we’ll use three here to also align the raw Markdown).</p> <p>⋅⋅⋅To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅ ⋅⋅⋅Note that this line is separate, but within the same paragraph.⋅⋅ ⋅⋅⋅(This is contrary to the typical GFM line break behavior, where trailing spaces are not required.)</p> <ul> <li>Unordered lists can use asterisks</li> <li>Or minuses</li> <li>Or pluses</li> </ul> <p><a href="https://www.google.com">I’m an inline-style link</a></p> <p><a href="https://www.google.com" title="Google's Homepage">I’m an inline-style link with title</a></p> <p><a href="https://www.mozilla.org">I’m a reference-style link</a></p> <p><a href="../blob/master/LICENSE">I’m a relative reference to a repository file</a></p> <p><a href="http://slashdot.org">You can use numbers for reference-style link definitions</a></p> <p>Or leave it empty and use the <a href="http://www.reddit.com">link text itself</a>.</p> <p>URLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or <a href="http://www.example.com">http://www.example.com</a> and sometimes example.com (but not on Github, for example).</p> <p>Some text to show that the reference links can follow later.</p> <p>Here’s our logo (hover to see the title text):</p> <p>Inline-style: <img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" alt="alt text" title="Logo Title Text 1"/></p> <p>Reference-style: <img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" alt="alt text" title="Logo Title Text 2"/></p> <p>Inline <code class="language-plaintext highlighter-rouge">code</code> has <code class="language-plaintext highlighter-rouge">back-ticks around</code> it.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">JavaScript syntax highlighting</span><span class="dl">"</span><span class="p">;</span>
<span class="nf">alert</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Python syntax highlighting</span><span class="sh">"</span>
<span class="nf">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>No language indicated, so no syntax highlighting. 
But let's throw in a &lt;b&gt;tag&lt;/b&gt;.
</code></pre></div></div> <p>Colons can be used to align columns.</p> <table> <thead> <tr> <th>Tables</th> <th style="text-align: center">Are</th> <th style="text-align: right">Cool</th> </tr> </thead> <tbody> <tr> <td>col 3 is</td> <td style="text-align: center">right-aligned</td> <td style="text-align: right">$1600</td> </tr> <tr> <td>col 2 is</td> <td style="text-align: center">centered</td> <td style="text-align: right">$12</td> </tr> <tr> <td>zebra stripes</td> <td style="text-align: center">are neat</td> <td style="text-align: right">$1</td> </tr> </tbody> </table> <p>There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don’t need to make the raw Markdown line up prettily. You can also use inline Markdown.</p> <table> <thead> <tr> <th>Markdown</th> <th>Less</th> <th>Pretty</th> </tr> </thead> <tbody> <tr> <td><em>Still</em></td> <td><code class="language-plaintext highlighter-rouge">renders</code></td> <td><strong>nicely</strong></td> </tr> <tr> <td>1</td> <td>2</td> <td>3</td> </tr> </tbody> </table> <blockquote> <p>Blockquotes are very handy in email to emulate reply text. This line is part of the same quote.</p> </blockquote> <p>Quote break.</p> <blockquote> <p>This is a very long line that will still be quoted properly when it wraps. Oh boy let’s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can <em>put</em> <strong>Markdown</strong> into a blockquote.</p> </blockquote> <p>Here’s a line for us to start with.</p> <p>This line is separated from the one above by two newlines, so it will be a <em>separate paragraph</em>.</p> <p>This line is also a separate paragraph, but… This line is only separated by a single newline, so it’s a separate line in the <em>same paragraph</em>.</p>]]></content><author><name>Albert Einstein</name></author><summary type="html"><![CDATA[Your blog post's abstract. Please add your abstract or summary here and not in the main body of your text. Do not include math/latex or hyperlinks.]]></summary></entry><entry><title type="html">Sample Blog Post (HTML version)</title><link href="https://sghzeng.github.io/blogposts/blog/distill-example2/" rel="alternate" type="text/html" title="Sample Blog Post (HTML version)"/><published>2025-04-28T00:00:00+08:00</published><updated>2025-04-28T00:00:00+08:00</updated><id>https://sghzeng.github.io/blogposts/blog/distill-example2</id><content type="html" xml:base="https://sghzeng.github.io/blogposts/blog/distill-example2/"><![CDATA[<p> This is a sample blog post written in HTML (while the other <a href="/blogposts/blog/distill-example/">sample post</a> is written in Markdown). Authors have the choice to write in HTML or Markdown. While Markdown is easier to write, HTML gives you more control over the layout of your post. Furthermore, Markdown often interacts in unexpected ways with MathJax and other HTML widgets. If you are having trouble with Markdown, try writing in HTML instead. </p> <p> Note: please use the table of contents as defined in the front matter rather than the traditional markdown styling. </p> <h2 id="equations">Equations</h2> <p>This theme supports rendering beautiful math in inline and display modes using <a href="https://www.mathjax.org/">MathJax 3</a> engine. You just need to surround your math expression with <code>$$</code>, like <code>$$ E = mc^2 $$</code>. If you leave it inside a paragraph, it will produce an inline expression, just like \(E = mc^2\).</p> <p>To use display mode, again surround your expression with <code>$$</code> and place it as a separate paragraph. Here is an example: $$ \left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right) $$ </p> <p>Note that MathJax 3 is <a href="https://docs.mathjax.org/en/latest/upgrading/whats-new-3.0.html">a major re-write of MathJax</a> that brought a significant improvement to the loading and rendering speed, which is now <a href="http://www.intmath.com/cg5/katex-mathjax-comparison.php">on par with KaTeX</a>.</p> <h2 id="images-and-figures">Images and Figures</h2> <p>Its generally a better idea to avoid linking to images hosted elsewhere - links can break and you might face losing important information in your blog post. You can display images from this repository using the following code:</p> <pre><code>{% include figure.html path="assets/img/2025-04-28-distill-example/iclr.png" class="img-fluid" %}</code></pre> <p>which results in the following image:</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/blogposts/assets/img/2025-04-28-distill-example/iclr-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/blogposts/assets/img/2025-04-28-distill-example/iclr-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/blogposts/assets/img/2025-04-28-distill-example/iclr-1400.webp"/> <img src="/blogposts/assets/img/2025-04-28-distill-example/iclr.png" class="img-fluid" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p> To ensure that there are no namespace conflicts, you must save your asset to your unique directory `/assets/img/2025-04-28-[SUBMISSION NAME]` within your submission. </p> <p> Please avoid using the direct HTML method of embedding images; they may not be properly resized. Some below complex ways to load images (note the different styles of the shapes/shadows): </p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/blogposts/assets/img/2025-04-28-distill-example/9-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/blogposts/assets/img/2025-04-28-distill-example/9-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/blogposts/assets/img/2025-04-28-distill-example/9-1400.webp"/> <img src="/blogposts/assets/img/2025-04-28-distill-example/9.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/blogposts/assets/img/2025-04-28-distill-example/7-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/blogposts/assets/img/2025-04-28-distill-example/7-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/blogposts/assets/img/2025-04-28-distill-example/7-1400.webp"/> <img src="/blogposts/assets/img/2025-04-28-distill-example/7.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> A simple, elegant caption looks good between image rows, after each row, or doesn't have to be there at all. </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/blogposts/assets/img/2025-04-28-distill-example/8-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/blogposts/assets/img/2025-04-28-distill-example/8-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/blogposts/assets/img/2025-04-28-distill-example/8-1400.webp"/> <img src="/blogposts/assets/img/2025-04-28-distill-example/8.jpg" class="img-fluid z-depth-2" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/blogposts/assets/img/2025-04-28-distill-example/10-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/blogposts/assets/img/2025-04-28-distill-example/10-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/blogposts/assets/img/2025-04-28-distill-example/10-1400.webp"/> <img src="/blogposts/assets/img/2025-04-28-distill-example/10.jpg" class="img-fluid z-depth-2" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/blogposts/assets/img/2025-04-28-distill-example/11-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/blogposts/assets/img/2025-04-28-distill-example/11-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/blogposts/assets/img/2025-04-28-distill-example/11-1400.webp"/> <img src="/blogposts/assets/img/2025-04-28-distill-example/11.jpg" class="img-fluid" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/blogposts/assets/img/2025-04-28-distill-example/12-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/blogposts/assets/img/2025-04-28-distill-example/12-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/blogposts/assets/img/2025-04-28-distill-example/12-1400.webp"/> <img src="/blogposts/assets/img/2025-04-28-distill-example/12.jpg" class="img-fluid" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/blogposts/assets/img/2025-04-28-distill-example/7-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/blogposts/assets/img/2025-04-28-distill-example/7-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/blogposts/assets/img/2025-04-28-distill-example/7-1400.webp"/> <img src="/blogposts/assets/img/2025-04-28-distill-example/7.jpg" class="img-fluid" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h3>Interactive Figures</h3> <p> Here's how you could embed interactive figures that have been exported as HTML files. Note that we will be using plotly for this demo, but anything built off of HTML should work. All that's required is for you to export your figure into HTML format, and make sure that the file exists in the `assets/html/[SUBMISSION NAME]/` directory in this repository's root directory. To embed it into any page, simply insert the following code anywhere into your page. </p> <pre><code>{% include [FIGURE_NAME].html %}</code></pre> <p> For example, the following code can be used to generate the figure underneath it. </p> <pre><code class="language-python">import pandas as pd
import plotly.express as px

df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/earthquakes-23k.csv')

fig = px.density_mapbox(
    df, lat='Latitude', lon='Longitude', z='Magnitude', radius=10,
    center=dict(lat=0, lon=180), zoom=0, mapbox_style="stamen-terrain")
fig.show()

fig.write_html('./assets/html/2025-04-28-distill-example/plotly_demo_1.html')
</code></pre> And then include it with the following: <pre><code class="language-html">&lt;div class="l-page"&gt;
  &lt;iframe src="{{ 'assets/html/2025-04-28-distill-example/plotly_demo_1.html' | relative_url }}" frameborder='0' scrolling='no' height="600px" width="100%"&gt;&lt;/iframe&gt;
&lt;/div&gt;
</code></pre> Voila! <div class="l-page"> <iframe src="/blogposts/assets/html/2025-04-28-distill-example/plotly_demo_1.html" frameborder='0' scrolling='no' height="600px" width="100%"></iframe> </div> <h2 id="citations">Citations</h2> <p> Citations are then used in the article body with the <code>&lt;d-cite&gt;</code> tag. The key attribute is a reference to the id provided in the bibliography. The key attribute can take multiple ids, separated by commas. </p> <p> The citation is presented inline like this: <d-cite key="gregor2015draw"></d-cite> (a number that displays more information on hover). If you have an appendix, a bibliography is automatically created and populated in it. </p> <p> Distill chose a numerical inline citation style to improve readability of citation dense articles and because many of the benefits of longer citations are obviated by displaying more information on hover. However, we consider it good style to mention author last names if you discuss something at length and it fits into the flow well - the authors are human and it's nice for them to have the community associate them with their work. </p> <h2 id="footnotes">Footnotes</h2> <p> Just wrap the text you would like to show up in a footnote in a <code>&lt;d-footnote&gt;</code> tag. The number of the footnote will be automatically generated.<d-footnote>This will become a hoverable footnote.</d-footnote> </p> <h2 id="code-blocks">Code Blocks</h2> <p> This theme implements a built-in Jekyll feature, the use of Rouge, for syntax highlighting. It supports more than 100 languages. This example is in C++. All you have to do is wrap your code in a liquid tag as follows: </p> <pre><code>
{% highlight c++ linenos %}  <br/> code code code <br/> {% endhighlight %}

</code></pre> The keyword `linenos` triggers display of line numbers. You can try toggling it on or off yourself below: <figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
<span class="n">string</span> <span class="n">myString</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">"input a string: "</span><span class="p">;</span>
    <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">myString</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">myString</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>

    <span class="kt">char</span> <span class="n">charArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">[</span><span class="n">length</span><span class="p">];</span>

    <span class="n">charArray</span> <span class="o">=</span> <span class="n">myString</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">charArray</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure> <h2 id="diagrams">Diagrams</h2> <p> This theme supports generating various diagrams from a text description using <a href="https://github.com/zhustec/jekyll-diagrams">jekyll-diagrams</a> plugin. Below, we generate a few examples of such diagrams using languages such as <a href="http://mermaid.js.org/">mermaid</a>, <a href="https://plantuml.com/">plantuml</a>, <a href="https://vega.github.io/vega-lite/">vega-lite</a>, etc. </p> <p> <b>Note</b>different diagram-generation packages require external dependencies to be installed on your machine. Also, be mindful of that because of diagram generation the first time you build your Jekyll website after adding new diagrams will be SLOW. For any other details, please refer to the <a href="https://github.com/zhustec/jekyll-diagrams">jekyll-diagrams</a> README. </p> <p> <b>Note:</b> This is not supported for local rendering! </p> <p> The diagram below was generated by the following code: </p> <pre><code>{% mermaid %}
sequenceDiagram
    participant John
    participant Alice
    Alice->>John: Hello John, how are you?
    John-->>Alice: Great!
{% endmermaid %}

</code></pre> <div class='jekyll-diagrams diagrams mermaid'> <svg id="mermaid-1739181461080" width="100%" xmlns="http://www.w3.org/2000/svg" height="100%" style="max-width:450px;" viewBox="-50 -10 450 231"><style>#mermaid-1739181461080 .label{font-family:trebuchet ms,verdana,arial;color:#333}#mermaid-1739181461080 .node circle,#mermaid-1739181461080 .node ellipse,#mermaid-1739181461080 .node polygon,#mermaid-1739181461080 .node rect{fill:#ececff;stroke:#9370db;stroke-width:1px}#mermaid-1739181461080 .node.clickable{cursor:pointer}#mermaid-1739181461080 .arrowheadPath{fill:#333}#mermaid-1739181461080 .edgePath .path{stroke:#333;stroke-width:1.5px}#mermaid-1739181461080 .edgeLabel{background-color:#e8e8e8}#mermaid-1739181461080 .cluster rect{fill:#ffffde!important;stroke:#aa3!important;stroke-width:1px!important}#mermaid-1739181461080 .cluster text{fill:#333}#mermaid-1739181461080 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:trebuchet ms,verdana,arial;font-size:12px;background:#ffffde;border:1px solid #aa3;border-radius:2px;pointer-events:none;z-index:100}#mermaid-1739181461080 .actor{stroke:#ccf;fill:#ececff}#mermaid-1739181461080 text.actor{fill:#000;stroke:none}#mermaid-1739181461080 .actor-line{stroke:grey}#mermaid-1739181461080 .messageLine0{marker-end:"url(#arrowhead)"}#mermaid-1739181461080 .messageLine0,#mermaid-1739181461080 .messageLine1{stroke-width:1.5;stroke-dasharray:"2 2";stroke:#333}#mermaid-1739181461080 #arrowhead{fill:#333}#mermaid-1739181461080 #crosshead path{fill:#333!important;stroke:#333!important}#mermaid-1739181461080 .messageText{fill:#333;stroke:none}#mermaid-1739181461080 .labelBox{stroke:#ccf;fill:#ececff}#mermaid-1739181461080 .labelText,#mermaid-1739181461080 .loopText{fill:#000;stroke:none}#mermaid-1739181461080 .loopLine{stroke-width:2;stroke-dasharray:"2 2";marker-end:"url(#arrowhead)";stroke:#ccf}#mermaid-1739181461080 .note{stroke:#aa3;fill:#fff5ad}#mermaid-1739181461080 .noteText{fill:#000;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:14px}#mermaid-1739181461080 .section{stroke:none;opacity:.2}#mermaid-1739181461080 .section0{fill:rgba(102,102,255,.49)}#mermaid-1739181461080 .section2{fill:#fff400}#mermaid-1739181461080 .section1,#mermaid-1739181461080 .section3{fill:#fff;opacity:.2}#mermaid-1739181461080 .sectionTitle0,#mermaid-1739181461080 .sectionTitle1,#mermaid-1739181461080 .sectionTitle2,#mermaid-1739181461080 .sectionTitle3{fill:#333}#mermaid-1739181461080 .sectionTitle{text-anchor:start;font-size:11px;text-height:14px}#mermaid-1739181461080 .grid .tick{stroke:#d3d3d3;opacity:.3;shape-rendering:crispEdges}#mermaid-1739181461080 .grid path{stroke-width:0}#mermaid-1739181461080 .today{fill:none;stroke:red;stroke-width:2px}#mermaid-1739181461080 .task{stroke-width:2}#mermaid-1739181461080 .taskText{text-anchor:middle;font-size:11px}#mermaid-1739181461080 .taskTextOutsideRight{fill:#000;text-anchor:start;font-size:11px}#mermaid-1739181461080 .taskTextOutsideLeft{fill:#000;text-anchor:end;font-size:11px}#mermaid-1739181461080 .taskText0,#mermaid-1739181461080 .taskText1,#mermaid-1739181461080 .taskText2,#mermaid-1739181461080 .taskText3{fill:#fff}#mermaid-1739181461080 .task0,#mermaid-1739181461080 .task1,#mermaid-1739181461080 .task2,#mermaid-1739181461080 .task3{fill:#8a90dd;stroke:#534fbc}#mermaid-1739181461080 .taskTextOutside0,#mermaid-1739181461080 .taskTextOutside1,#mermaid-1739181461080 .taskTextOutside2,#mermaid-1739181461080 .taskTextOutside3{fill:#000}#mermaid-1739181461080 .active0,#mermaid-1739181461080 .active1,#mermaid-1739181461080 .active2,#mermaid-1739181461080 .active3{fill:#bfc7ff;stroke:#534fbc}#mermaid-1739181461080 .activeText0,#mermaid-1739181461080 .activeText1,#mermaid-1739181461080 .activeText2,#mermaid-1739181461080 .activeText3{fill:#000!important}#mermaid-1739181461080 .done0,#mermaid-1739181461080 .done1,#mermaid-1739181461080 .done2,#mermaid-1739181461080 .done3{stroke:grey;fill:#d3d3d3;stroke-width:2}#mermaid-1739181461080 .doneText0,#mermaid-1739181461080 .doneText1,#mermaid-1739181461080 .doneText2,#mermaid-1739181461080 .doneText3{fill:#000!important}#mermaid-1739181461080 .crit0,#mermaid-1739181461080 .crit1,#mermaid-1739181461080 .crit2,#mermaid-1739181461080 .crit3{stroke:#f88;fill:red;stroke-width:2}#mermaid-1739181461080 .activeCrit0,#mermaid-1739181461080 .activeCrit1,#mermaid-1739181461080 .activeCrit2,#mermaid-1739181461080 .activeCrit3{stroke:#f88;fill:#bfc7ff;stroke-width:2}#mermaid-1739181461080 .doneCrit0,#mermaid-1739181461080 .doneCrit1,#mermaid-1739181461080 .doneCrit2,#mermaid-1739181461080 .doneCrit3{stroke:#f88;fill:#d3d3d3;stroke-width:2;cursor:pointer;shape-rendering:crispEdges}#mermaid-1739181461080 .activeCritText0,#mermaid-1739181461080 .activeCritText1,#mermaid-1739181461080 .activeCritText2,#mermaid-1739181461080 .activeCritText3,#mermaid-1739181461080 .doneCritText0,#mermaid-1739181461080 .doneCritText1,#mermaid-1739181461080 .doneCritText2,#mermaid-1739181461080 .doneCritText3{fill:#000!important}#mermaid-1739181461080 .titleText{text-anchor:middle;font-size:18px;fill:#000}
#mermaid-1739181461080 g.classGroup text{fill:#9370db;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:10px}#mermaid-1739181461080 g.classGroup rect{fill:#ececff;stroke:#9370db}#mermaid-1739181461080 g.classGroup line{stroke:#9370db;stroke-width:1}#mermaid-1739181461080 .classLabel .box{stroke:none;stroke-width:0;fill:#ececff;opacity:.5}#mermaid-1739181461080 .classLabel .label{fill:#9370db;font-size:10px}#mermaid-1739181461080 .relation{stroke:#9370db;stroke-width:1;fill:none}#mermaid-1739181461080 #compositionEnd,#mermaid-1739181461080 #compositionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-1739181461080 #aggregationEnd,#mermaid-1739181461080 #aggregationStart{fill:#ececff;stroke:#9370db;stroke-width:1}#mermaid-1739181461080 #dependencyEnd,#mermaid-1739181461080 #dependencyStart,#mermaid-1739181461080 #extensionEnd,#mermaid-1739181461080 #extensionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-1739181461080 .branch-label,#mermaid-1739181461080 .commit-id,#mermaid-1739181461080 .commit-msg{fill:#d3d3d3;color:#d3d3d3}</style><style>#mermaid-1739181461080{color:#000;font:normal normal 400 normal 16px / normal "Times New Roman"}</style><g></g><g><line id="actor0" x1="75" y1="5" x2="75" y2="220" class="actor-line" stroke-width="0.5px" stroke="#999"></line><rect x="0" y="0" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="75" y="32.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="75" dy="0">John</tspan></text></g><g><line id="actor1" x1="275" y1="5" x2="275" y2="220" class="actor-line" stroke-width="0.5px" stroke="#999"></line><rect x="200" y="0" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="275" y="32.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="275" dy="0">Alice</tspan></text></g><defs><marker id="arrowhead" refX="5" refY="2" markerWidth="6" markerHeight="4" orient="auto"><path d="M 0,0 V 4 L6,2 Z"></path></marker></defs><defs><marker id="crosshead" markerWidth="15" markerHeight="8" orient="auto" refX="16" refY="4"><path fill="black" stroke="#000000" stroke-width="1px" d="M 9,2 V 6 L16,4 Z" style="stroke-dasharray: 0, 0;"></path><path fill="none" stroke="#000000" stroke-width="1px" d="M 0,1 L 6,7 M 6,1 L 0,7" style="stroke-dasharray: 0, 0;"></path></marker></defs><g><text x="175" y="93" class="messageText" style="text-anchor: middle;">Hello John, how are you?</text><line x1="275" y1="100" x2="75" y2="100" class="messageLine0" stroke-width="2" stroke="black" marker-end="url(#arrowhead)" style="fill: none;"></line></g><g><text x="175" y="128" class="messageText" style="text-anchor: middle;">Great!</text><line x1="75" y1="135" x2="275" y2="135" class="messageLine1" stroke-width="2" stroke="black" marker-end="url(#arrowhead)" style="stroke-dasharray: 3, 3; fill: none;"></line></g><g><rect x="0" y="155" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="75" y="187.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="75" dy="0">John</tspan></text></g><g><rect x="200" y="155" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="275" y="187.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="275" dy="0">Alice</tspan></text></g></svg> </div> <h2 id="tweets">Tweets</h2> <p> An example of displaying a tweet: <div class='jekyll-twitter-plugin'><blockquote class="twitter-tweet"><p lang="sv" dir="ltr">jekyll-twitter-plugin (1.0.0): A Liquid tag plugin for Jekyll that renders Tweets from Twitter API <a href="http://t.co/m4EIQPM9h4">http://t.co/m4EIQPM9h4</a></p>&mdash; RubyGems (@rubygems) <a href="https://twitter.com/rubygems/status/518821243320287232?ref_src=twsrc%5Etfw">October 5, 2014</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> </div> </p> <p> An example of pulling from a timeline: <div class='jekyll-twitter-plugin'><a class="twitter-timeline" data-width="500" data-tweet-limit="3" href="https://twitter.com/jekyllrb?ref_src=twsrc%5Etfw">Tweets by jekyllrb</a> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> </div> </p> <p> For more details on using the plugin visit: <a href="https://github.com/rob-murray/jekyll-twitter-plugin">jekyll-twitter-plugin</a> </p> <h2 id="blockquotes">Blockquotes</h2> <blockquote> We do not grow absolutely, chronologically. We grow sometimes in one dimension, and not in another, unevenly. We grow partially. We are relative. We are mature in one realm, childish in another. —Anais Nin </blockquote> <h2 id="layouts">Layouts</h2> The main text column is referred to as the body. It's the assumed layout of any direct descendants of the `d-article` element. <div class="fake-img l-body"> <p>.l-body</p> </div> For images you want to display a little larger, try `.l-page`: <div class="fake-img l-page"> <p>.l-page</p> </div> All of these have an outset variant if you want to poke out from the body text a little bit. For instance: <div class="fake-img l-body-outset"> <p>.l-body-outset</p> </div> <div class="fake-img l-page-outset"> <p>.l-page-outset</p> </div> Occasionally you'll want to use the full browser width. For this, use `.l-screen`. You can also inset the element a little from the edge of the browser by using the inset variant. <div class="fake-img l-screen"> <p>.l-screen</p> </div> <div class="fake-img l-screen-inset"> <p>.l-screen-inset</p> </div> The final layout is for marginalia, asides, and footnotes. It does not interrupt the normal flow of `.l-body`-sized text except on mobile screen sizes. <div class="fake-img l-gutter"> <p>.l-gutter</p> </div> <h2 id="other-typography">Other Typography?</h2> <p> Emphasis, aka italics, with the <code>&lt;i&gt;&lt;/i&gt;</code> tag <i>emphasis</i>. </p> <p> Strong emphasis, aka bold, with <code>&lt;b&gt;&lt;/b&gt;</code> tag <b>bold</b>. </p> <p> Strikethrough ca be accomplished with the <code>&lt;s&gt;&lt;/s&gt;</code> tag. <s>Scratch this.</s> </p> <ul> <li>First ordered list item</li> <li>Another item</li> <ol> <li>Unordered sub-list. </li> </ol> <li>And another item.</li> </ul> <p> For code, the language can be specified in the class. For example, use <q>language-javascript</q> for Javascript and <q>language-python</q> for Python code. </p> <pre><code class="language-javascript">var s = "JavaScript syntax highlighting";
  alert(s);</code></pre> <pre><code class="language-python">s = "Python syntax highlighting"
  print(s)</code></pre> <pre><code class="language-python">No language indicated, so no syntax highlighting.</code></pre> <p> A table can be created with the <code>&lt;table&gt;</code> element. Below is an example </p> <table> <thead> <tr> <th>Tables</th> <th style="text-align: center">Are</th> <th style="text-align: right">Cool</th> </tr> </thead> <tbody> <tr> <td>col 3 is</td> <td style="text-align: center">right-aligned</td> <td style="text-align: right">$1600</td> </tr> <tr> <td>col 2 is</td> <td style="text-align: center">centered</td> <td style="text-align: right">$12</td> </tr> <tr> <td>zebra stripes</td> <td style="text-align: center">are neat</td> <td style="text-align: right">$1</td> </tr> </tbody> </table> <p> <blockquote>Blockquotes can be defined with the &gt;blockquote&lt; tag.</blockquote> </p>]]></content><author><name>Albert Einstein</name></author><summary type="html"><![CDATA[Your blog post's abstract. Please add your abstract or summary here and not in the main body of your text. Do not include math/latex or hyperlinks.]]></summary></entry></feed>